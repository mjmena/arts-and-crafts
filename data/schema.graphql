input AddAddressInput {
  customer_id: ID!
  description: String!
  location: String!
  is_billing_address: Boolean!
  clientMutationId: String!
}

type AddAddressPayload {
  address: Address
  clientMutationId: String!
}

input AddCustomerInput {
  name: String!
  clientMutationId: String!
}

type AddCustomerPayload {
  viewer: Viewer
  customer: Customer
  clientMutationId: String!
}

type Address implements Node {
  id: ID!
  description: String
  address: String
  is_billing_address: Boolean
  is_active: Boolean
  services(after: String, first: Int, before: String, last: Int): ServiceConnection
  recurring_services(after: String, first: Int, before: String, last: Int): RecurringServiceConnection
}

type AddressConnection {
  pageInfo: PageInfo!
  edges: [AddressEdge]
}

type AddressEdge {
  node: Address
  cursor: String!
}

type Customer implements Node {
  id: ID!
  name: String
  addresses(after: String, first: Int, before: String, last: Int): AddressConnection
  payments(after: String, first: Int, before: String, last: Int): PaymentConnection
  invoices(after: String, first: Int, before: String, last: Int): InvoiceConnection
  is_active: Boolean
}

type Invoice implements Node {
  id: ID!
  start: String
  end: String
  services(after: String, first: Int, before: String, last: Int): ServiceConnection
}

type InvoiceConnection {
  pageInfo: PageInfo!
  edges: [InvoiceEdge]
}

type InvoiceEdge {
  node: Invoice
  cursor: String!
}

type Mutation {
  addCustomer(input: AddCustomerInput!): AddCustomerPayload
  addAddress(input: AddAddressInput!): AddAddressPayload
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Payment implements Node {
  id: ID!
  type: String
  description: String
  amount: Float
  date: String
}

type PaymentConnection {
  pageInfo: PageInfo!
  edges: [PaymentEdge]
}

type PaymentEdge {
  node: Payment
  cursor: String!
}

type Query {
  viewer: Viewer
  node(id: ID!): Node
}

type RecurringService implements Node {
  id: ID!
  description: String
  cost: Float
  day: Int
  week: String
  month: Int
  type: String
}

type RecurringServiceConnection {
  pageInfo: PageInfo!
  edges: [RecurringServiceEdge]
}

type RecurringServiceEdge {
  node: RecurringService
  cursor: String!
}

type Service implements Node {
  id: ID!
  description: String
  cost: Float
  start: String
  end: String
}

type ServiceConnection {
  pageInfo: PageInfo!
  edges: [ServiceEdge]
}

type ServiceEdge {
  node: Service
  cursor: String!
}

type Viewer {
  id: ID!
  customers: [Customer]
}
